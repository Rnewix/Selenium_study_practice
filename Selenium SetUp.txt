-------------------------------------------------------
Documentacion
-------------------------------------------------------
    Python >3.6  
    Selenium        (Automatiza/ emulate user interaction with browsers. No testea, solo automatiza acciones)   
    Driver          (Comunica Selenium con el navegador)(Existe un driver por cada navegador especifico)


    Unittest        Libreria Python para test de cualquier codigo Python. Puede integrar Selenium para test en Web automatizada. Realiza pruebas unitarias (test).  (Alternativas = pytest, nose)   
    HtmlTestRunner  Libreria Python. Genera reporte en HTML de unittest (Visual en html) (malo era el pyunitreport)

    -------------------------------------------------------
    Unittest (PyTest)
    -------------------------------------------------------
    Test Fixture    Metodos. Methods that execute before and after a test method executes. Preparan el ambiente de test
    Assertions      Methods that check the behavior of the component being tested.
    Test case       Metodo/Funcion a probar
    Test Suite      A group of related tests executed together. Coleccion de test case
    Test runner     Programa que ejecuta los test case/suites
    Test report     resporte del test


    Ejemplo UnitTest/Selenium  
    ---------------------------------------------------------   
    class TestWebpage(unittest.TestCase):                                                           #<---- Crea objeto que hereda de TesCase class que tiene como metodos los test fixture and test cases

        def setUpClass(cls):                                                                        #<---- Test Fixture. Prepara lo requerido antes del test.
            cls.driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))   
            

        def test_visit_wikipedia(self):                                                             #<---- Pruebas Unitarias / cada test case
            self.driver.get('https://www.wikipedia.org')  

        def test_...


        def tearDownClass(cls):                                                                     #<---- Test Fixture. Preparado para dictar como culminar
            cls.driver.quit()                                                         

        if __name__ == "__main__":                                          
            unittest.main(                                                                          #<---- unittest.main() to run unitest in the call
                verbosity = 2,                                                                      #<---- Get more info on the result from UnitTest
                testRunner = HTMLTestRunner(                                                        #<---- Creacion de reporte con TestRuner de PyUnitReport. output = carpeta, report_name = nombre de html con el reporte
                    output = 'report',                                                 
                    report_name = 'test-report'))  

    NOTA:   Nombre de clase     Test...
            Nombre de metodos   def test_...
    ---------------------------------------------------------


--------------------------------------------------------
Inicio de trabajo (instalaciones)
--------------------------------------------------------
1.- Crear venv

    python3 -m venv venvName
    source venv/bin/activate 
    git init
    touch .gitignore
    ---- .gitignore >>>>> venv/ 

2.- Instalacion de python y selenium. Instalacion de otras librerias deseadas (PyUniReport)

    Python --version
    pip install selenium  
    pip install html-testRunner (antes pyunitreport)

3.- Conseguir Driver para Selenium para cada browser

        Metodo 1: Autoinstalacion. Instalar webdriver-manager para Selenium (Administrador y autoinstalador de drivers) (Autoinstala driver mas actualadecuado cada vez que se corre selenium)
            
            pip install webdriver-manager               

            -----------------------------------------------------------------------------------
            script.py
            -----------------------------------------------------------------------------------
                from selenium import webdriver                                          
                from selenium.webdriver.chrome.service import Service as ChromeService 
                from webdriver_manager.chrome import ChromeDriverManager

                driver = webdriver.Chrome(service=ChromeService(ChromeDriverManager().install()))


        Metodo 2: Descargar Driver especifico manualmente y colocar en carpeta de proyecto descomprimido

            ---------------------------------------------------------
            Drivers
            ---------------------------------------------------------
            Chrome: https://chromedriver.chromium.org/      (descargar el stable release)

            Edge: https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver/

            Firefox: https://github.com/mozilla/geckodriver/releases

            Safari: https://webkit.org/blog/6900/webdriver-support-in-safari-10/

            -----------------------------------------------------------------------------------
            scrip.py
            -----------------------------------------------------------------------------------
                from selenium import webdriver                                          
                from selenium.webdriver.chrome.service import Service as ChromeService    

                driver = webdriver.Chrome(service=ChromeService("C:\URL completa"))        
                    o
                s = ChromeService("C:\URL completa")
                driver = webdriver.Chrome(service = s)
                        
                




